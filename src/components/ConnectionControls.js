import React, { useState } from "react";
import { GitBranch, MousePointer, ChevronDown } from "lucide-react";

const ConnectionControls = ({ isConnecting, onToggleConnectionMode, connectionsCount, selectedConnectionType, onConnectionTypeChange }) => {
	const [showTypeMenu, setShowTypeMenu] = useState(false);

	const connectionTypes = [
		{ type: "uses", label: "üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç (–º–µ—Ç–æ–¥—ã)", description: "–ö–ª–∞—Å—Å –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞" },
		{ type: "extends", label: "üìà –ù–∞—Å–ª–µ–¥—É–µ—Ç (—Ä–æ–¥–∏—Ç–µ–ª—å-–ø–æ—Ç–æ–º–æ–∫)", description: "–û–¥–∏–Ω –∫–ª–∞—Å—Å –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –¥—Ä—É–≥–æ–≥–æ" },
		{ type: "contains", label: "üì¶ –°–æ–¥–µ—Ä–∂–∏—Ç (–∫–æ–ª–ª–µ–∫—Ü–∏—è)", description: "–ö–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫/–º–∞—Å—Å–∏–≤ –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤" },
		{ type: "creates", label: "‚ö° –°–æ–∑–¥–∞–µ—Ç (—Ñ–∞–±—Ä–∏–∫–∞)", description: "–ö–ª–∞—Å—Å —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞" },
		{ type: "related", label: "üîó –°–≤—è–∑–∞–Ω (–æ–±—â–∞—è —Å–≤—è–∑—å)", description: "–û–±—â–∞—è —Å–≤—è–∑—å, –∫–æ–≥–¥–∞ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ –∫–∞–∫–∞—è –∏–º–µ–Ω–Ω–æ" },
	];

	const getCurrentTypeLabel = () => {
		const currentType = connectionTypes.find((t) => t.type === selectedConnectionType);
		return currentType ? currentType.label : "üîó –°–≤—è–∑–∞–Ω (–æ–±—â–∞—è —Å–≤—è–∑—å)";
	};

	const handleTypeSelect = (type) => {
		onConnectionTypeChange(type);
		setShowTypeMenu(false);
	};

	return (
		<div className="mb-4 p-3 bg-purple-50 border border-purple-200 rounded">
			<h3 className="font-semibold mb-2 text-sm">–°–≤—è–∑–∏ –º–µ–∂–¥—É –∫–ª–∞—Å—Å–∞–º–∏</h3>

			<div className="mb-2 text-xs text-gray-600">–°–æ–∑–¥–∞–Ω–æ —Å–≤—è–∑–µ–π: {connectionsCount}</div>

			{/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–≤—è–∑–∏ */}
			<div className="mb-3 relative">
				<label className="block text-xs font-medium text-gray-700 mb-1">–¢–∏–ø —Å–≤—è–∑–∏:</label>
				<button
					onClick={() => setShowTypeMenu(!showTypeMenu)}
					className="w-full p-2 text-left bg-white border border-gray-300 rounded text-sm hover:bg-gray-50 flex items-center justify-between"
				>
					<span className="truncate">{getCurrentTypeLabel()}</span>
					<ChevronDown size={14} className={`transition-transform ${showTypeMenu ? "rotate-180" : ""}`} />
				</button>

				{showTypeMenu && (
					<div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-50 max-h-60 overflow-y-auto">
						{connectionTypes.map((connectionType) => {
							// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –ª–∏–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
							const getLineStyle = (type) => {
								switch (type) {
									case "uses":
										return { color: "#3b82f6", strokeDasharray: "none" }; // —Å–∏–Ω–∏–π
									case "extends":
										return { color: "#10b981", strokeDasharray: "none" }; // –∑–µ–ª–µ–Ω—ã–π
									case "contains":
										return { color: "#f59e0b", strokeDasharray: "none" }; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
									case "creates":
										return { color: "#8b5cf6", strokeDasharray: "5,3" }; // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –ø—É–Ω–∫—Ç–∏—Ä
									case "related":
									default:
										return { color: "#6b7280", strokeDasharray: "none" }; // —Å–µ—Ä—ã–π
								}
							};

							const lineStyle = getLineStyle(connectionType.type);

							return (
								<button
									key={connectionType.type}
									onClick={() => handleTypeSelect(connectionType.type)}
									className={`w-full p-3 text-left hover:bg-gray-50 border-b border-gray-100 last:border-b-0 ${selectedConnectionType === connectionType.type ? "bg-purple-50" : ""}`}
								>
									<div className="font-medium text-sm mb-2">{connectionType.label}</div>
									<div className="text-xs text-gray-500 mb-2">{connectionType.description}</div>

									{/* –ü—Ä–∏–º–µ—Ä –ª–∏–Ω–∏–∏ */}
									<div className="flex items-center gap-2">
										<span className="text-xs text-gray-400">–ü—Ä–∏–º–µ—Ä:</span>
										<svg width="60" height="20" className="flex-shrink-0">
											<line x1="5" y1="10" x2="55" y2="10" stroke={lineStyle.color} strokeWidth="2.5" strokeDasharray={lineStyle.strokeDasharray} />
										</svg>
									</div>
								</button>
							);
						})}
					</div>
				)}

				{/* –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ */}
				{showTypeMenu && <div className="fixed inset-0 z-40" onClick={() => setShowTypeMenu(false)} />}
			</div>

			<button
				onClick={onToggleConnectionMode}
				className={`w-full p-2 rounded transition-colors flex items-center justify-center gap-2 ${
					isConnecting ? "bg-purple-500 text-white hover:bg-purple-600" : "bg-gray-200 text-gray-700 hover:bg-gray-300"
				}`}
			>
				{isConnecting ? (
					<>
						<GitBranch size={16} />
						–†–µ–∂–∏–º —Å–≤—è–∑–µ–π (–∞–∫—Ç–∏–≤–µ–Ω)
					</>
				) : (
					<>
						<MousePointer size={16} />
						–°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å
					</>
				)}
			</button>

			{isConnecting && (
				<div className="mt-2 text-xs text-purple-700 bg-purple-100 p-2 rounded">
					<div className="font-medium mb-1">–†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π –∞–∫—Ç–∏–≤–µ–Ω:</div>
					<div>1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–≤—è–∑–∏ –≤—ã—à–µ</div>
					<div>2. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Å</div>
					<div>3. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –≤—Ç–æ—Ä–æ–π –∫–ª–∞—Å—Å</div>
					<div>4. –°–≤—è–∑—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</div>
					<div className="mt-1 font-medium text-green-600">‚ú® –¢–∏–ø: {getCurrentTypeLabel()}</div>
					<div className="mt-1 font-medium text-red-600">‚ö†Ô∏è –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ</div>
					<div className="mt-1 text-xs text-gray-600">–ö–ª–∏–∫–Ω–∏—Ç–µ "–†–µ–∂–∏–º —Å–≤—è–∑–µ–π" –¥–ª—è –≤—ã—Ö–æ–¥–∞</div>
				</div>
			)}
		</div>
	);
};

export default ConnectionControls;
